name: 🔒 CI/CD Security Scanner

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: 🛡️ SAST Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      actions: read

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Semgrep SAST Scan
        id: semgrep
        uses: semgrep/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ secrets.SEMGREP_DEPLOYMENT_ID }}
          generateSarif: "1"
        env:
          SEMGREP_RULES: >-
            --config=auto
            --config=p/security-audit
            --config=p/secrets
            --config=p/owasp-top-ten
            --config=p/command-injection
            --config=p/sql-injection

      - name: 📊 Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: 📈 Generate Security Report
        if: always()
        run: |
          # Create reports directory
          mkdir -p reports
          
          # Generate JSON report for badge generation
          semgrep --config=auto --config=p/security-audit --config=p/secrets --config=p/owasp-top-ten --json --output=reports/semgrep-results.json src/ || true
          
          # Count vulnerabilities by severity
          HIGH_COUNT=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' reports/semgrep-results.json 2>/dev/null || echo "0")
          MEDIUM_COUNT=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' reports/semgrep-results.json 2>/dev/null || echo "0")
          LOW_COUNT=$(jq '[.results[] | select(.extra.severity == "INFO")] | length' reports/semgrep-results.json 2>/dev/null || echo "0")
          TOTAL_COUNT=$(jq '.results | length' reports/semgrep-results.json 2>/dev/null || echo "0")
          
          echo "HIGH_VULNS=$HIGH_COUNT" >> $GITHUB_ENV
          echo "MEDIUM_VULNS=$MEDIUM_COUNT" >> $GITHUB_ENV
          echo "LOW_VULNS=$LOW_COUNT" >> $GITHUB_ENV
          echo "TOTAL_VULNS=$TOTAL_COUNT" >> $GITHUB_ENV
          
          # Generate HTML report
          cat > reports/security-report.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>Security Scan Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                  .stats { display: flex; gap: 20px; margin: 20px 0; }
                  .stat-card { padding: 15px; border-radius: 8px; text-align: center; min-width: 100px; }
                  .high { background: #ffebee; border-left: 4px solid #f44336; }
                  .medium { background: #fff3e0; border-left: 4px solid #ff9800; }
                  .low { background: #e8f5e8; border-left: 4px solid #4caf50; }
                  .total { background: #e3f2fd; border-left: 4px solid #2196f3; }
                  .count { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
                  .label { font-size: 12px; text-transform: uppercase; color: #666; }
                  .timestamp { color: #666; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🔒 Security Scan Report</h1>
                  <p class="timestamp">Generated on: $(date -u)</p>
                  <p>Repository: \${{ github.repository }}</p>
                  <p>Commit: \${{ github.sha }}</p>
              </div>
              
              <div class="stats">
                  <div class="stat-card high">
                      <div class="count">$HIGH_COUNT</div>
                      <div class="label">High Risk</div>
                  </div>
                  <div class="stat-card medium">
                      <div class="count">$MEDIUM_COUNT</div>
                      <div class="label">Medium Risk</div>
                  </div>
                  <div class="stat-card low">
                      <div class="count">$LOW_COUNT</div>
                      <div class="label">Low Risk</div>
                  </div>
                  <div class="stat-card total">
                      <div class="count">$TOTAL_COUNT</div>
                      <div class="label">Total Issues</div>
                  </div>
              </div>
              
              <h2>Scan Details</h2>
              <ul>
                  <li><strong>Scanner:</strong> Semgrep</li>
                  <li><strong>Rules:</strong> Auto, Security Audit, Secrets, OWASP Top 10</li>
                  <li><strong>Files Scanned:</strong> Python, JavaScript, and other supported languages</li>
              </ul>
              
              <p><em>Full details available in the SARIF report uploaded to GitHub Security tab.</em></p>
          </body>
          </html>
          EOF

      - name: 🏷️ Generate Security Badge
        if: always()
        run: |
          # Determine badge color based on high-risk vulnerabilities
          if [ "$HIGH_VULNS" -gt "0" ]; then
            COLOR="red"
            STATUS="$HIGH_VULNS high risk"
          elif [ "$MEDIUM_VULNS" -gt "0" ]; then
            COLOR="orange"
            STATUS="$MEDIUM_VULNS medium risk"
          elif [ "$TOTAL_VULNS" -gt "0" ]; then
            COLOR="yellow"
            STATUS="$TOTAL_VULNS low risk"
          else
            COLOR="brightgreen"
            STATUS="no issues"
          fi
          
          # Create badge JSON for shields.io
          mkdir -p badges
          cat > badges/security-badge.json << EOF
          {
            "schemaVersion": 1,
            "label": "security",
            "message": "$STATUS",
            "color": "$COLOR"
          }
          EOF
          
          echo "BADGE_COLOR=$COLOR" >> $GITHUB_ENV
          echo "BADGE_STATUS=$STATUS" >> $GITHUB_ENV

      - name: 📦 Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            reports/
            badges/
          retention-days: 30

      - name: 📄 Deploy Reports to GitHub Pages
        if: always() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          destination_dir: security-reports

  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 📦 Install Node Dependencies
        run: |
          cd src
          npm install

      - name: ✅ Run Basic Tests
        run: |
          echo "✅ Python syntax check"
          python -m py_compile src/app.py
          
          echo "✅ Node.js syntax check"
          node -c src/server.js
          
          echo "✅ Build completed successfully"

  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, build-test]
    if: always()
    
    steps:
      - name: 📥 Download Security Reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: ./reports

      - name: 📋 Post Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const badgeData = JSON.parse(fs.readFileSync('./reports/badges/security-badge.json', 'utf8'));
              const status = badgeData.message;
              const color = badgeData.color;
              
              const emoji = color === 'brightgreen' ? '✅' : color === 'yellow' ? '⚠️' : color === 'orange' ? '🔶' : '🔴';
              
              const comment = `## ${emoji} Security Scan Results
              
              **Status:** ${status}
              
              The security scan has completed. ${color === 'brightgreen' ? 'No security issues detected!' : 'Security issues found - please review the Security tab for details.'}
              
              📊 [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              🔍 [Security findings](https://github.com/${{ github.repository }}/security/code-scanning)
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post security summary:', error);
            }
